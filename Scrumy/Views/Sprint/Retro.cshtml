@model Scrumy.Models.MixedVM.RetroVM


<section class="retro container">
    <h2>Sprints Retrospective</h2>

    <div class="row">
        @foreach (var item in Model.Sprints)
        {
            <h3>
                Sprint Target: @item.SprintTarget
            </h3>
            <div class="panel-group" id="accordion">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <a data-toggle="collapse" data-parent="#accordion" href="#collapse1">
                           <h4 class="panel-title">
                               Sprint Tasks
                            </h4>
                        </a>
                    </div>
                    <div id="collapse1" class="panel-collapse collapse">
                        <div class="panel-body">
                            @foreach (var item2 in Model.Tasks)
                            {
                                if (item2.SprintId == item.Id)
                                {
                                    <div class="element toDo-element">
                                        <p>@item2.Title</p>
                                        <p>@item2.Desc</p>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <a data-toggle="collapse" data-parent="#accordion" href="#collapse2">
                            <h4 class="panel-title">
                                Sprint Opinions
                            </h4>
                        </a>
                    </div>
                    <div id="collapse2" class="panel-collapse collapse">
                        <div class="panel-body">
                            @foreach (var item3 in Model.Feedback)
                            {
                                if (item3.SprintId == item.Id)
                                {
                                    <p class="opinion">
                                        @item3.Comment
                                    </p>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <button type="button" class="btn-view margin-auto" data-toggle="modal" data-target="#addOpinionModal">Add Opinion</button>
                @await Html.PartialAsync("_addOpinionModal", Model.OpinionToAdd, new ViewDataDictionary(ViewData)
                             {
                                 { "sprintid", item.Id }
                             })
            </div>

        }
    </div>
</section>